# Main entrypoint of the workflow. 
# Please follow the best practices: 
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there. 
import pandas as pd
import numpy as np

configfile: "config/config.yaml"

MEAN_NUC_ILLUMINA="300"
MEAN_NUC_NANOPORE="30000"

wildcard_constraints:
    technology="|".join(["nanopore", "illumina"]),
    model="|".join(["/human_NA12878_DNA_FAB49712_guppy/training", ""]),

def final_output():
    final_output = []
    for g in lookup(dpath="groups", within=config):
        final_output.extend(
            expand(
                "results/samples/{group}/illumina/{group}.{alias}.mean_fragment_nucleotides_{mean_nuc}{read}.fq",
                group=g,
                alias=lookup(dpath=f"groups/{g}", within=config),
                mean_nuc=[MEAN_NUC_ILLUMINA],
                read=[".1", ".2"],
            )
        )
        final_output.extend(
            expand(
                "results/samples/{group}/nanopore{model}/{group}.{alias}.mean_fragment_nucleotides_{mean_nuc}.fq",
                group=g,
                model=["/human_NA12878_DNA_FAB49712_guppy/training"],
                alias=lookup(dpath=f"groups/{g}", within=config),
                mean_nuc=[MEAN_NUC_NANOPORE],
            )
        )
        final_output.extend([
            "results/samples/samples.tsv",
            "results/samples/units.tsv",
        ])
    return final_output

rule all:
    input: final_output()

rule get_chromosomes_ref:
    output:
        "resources/chromosome_{chrom}.fa.gz",
    params:
        species=lookup(dpath="reference/species", within=config),
        datatype="dna",
        build=lookup(dpath="reference/build", within=config),
        release=lookup(dpath="reference/release", within=config),
        chromosome=["{chrom}"]
        # branch="plants",  # optional: specify branch
    log:
        "logs/get_chromosome_{chrom}_ref.log",
    cache: "omit-software"  # save space and time with between workflow caching (see docs)
    wrapper:
        "v4.3.0/bio/reference/ensembl-sequence"


rule config_segment_to_bed:
    output:
        bed="results/segments/{circle}.{segment}.bed"
    log:
        "logs/segments/{circle}.{segment}.bed.log"
    params:
        segment=lambda wc: lookup(dpath=f"circles/{wc.circle}/{wc.segment}", within=config)
    run:
        with open(output["bed"], "w") as bed:
            bed.write(f"{params.segment['chrom']}\t{params.segment['start']}\t{params.segment['end']}\t{params.segment['name']}\t\t{params.segment['strand']}")


rule segment_bed_to_fasta:
    input:
        fasta=lambda wc: f"resources/chromosome_{lookup(dpath=f"circles/{wc.circle}/{wc.segment}/chrom", within=config)}.fa.gz",
        bed="results/segments/{circle}.{segment}.bed"
    output:
        fasta="results/segments/{circle}.{segment}.fa.gz"
    log:
        "logs/segments/{circle}.{segment}.fa.log"
    params:
        command="subseq",
    threads: 2
    wrapper:
        "v4.3.0/bio/seqkit"


rule segment_fasta_rename:
    input:
        fasta="results/segments/{circle}.{segment}.fa.gz"
    output:
        fasta="results/segments/{circle}.{segment}.circle_name.fa.gz"
    log:
        "logs/segments/{circle}.{segment}.circle_name.fa.log"
    params:
        command="replace",
        extra='-p "^" -r "{circle} {segment} "'
    threads: 2
    wrapper:
        "v4.3.0/bio/seqkit"


rule create_full_circle:
    input:
        fastas=lambda wc: expand(
            "results/segments/{{circle}}.{segment}.circle_name.fa.gz",
            segment=lookup(dpath=f"circles/{wc.circle}", within=config).keys(),
        ),
    output:
        fasta="results/circles/{circle}/{circle}.fa"
    log:
        "logs/circles/{circle}/{circle}.log"
    params:
        command=lambda wc, input: "concat" if len(input.fastas) > 1 else "grep",  # do-nothing grep for circle name if only one segment in circle
        extra=lambda wc, input: "" if len(input.fastas) > 1 else f'-r -p "{wc.circle}"',
    threads: 2
    wrapper:
        "v4.3.0/bio/seqkit"


rule get_circle_stats:
    input:
        fasta="results/circles/{circle}/{circle}.fa"
    output:
        tsv="results/circles/{circle}/{circle}.stats.tsv"
    log:
        "logs/circles/{circle}/{circle}.stats.log"
    params:
        command="stats",
        extra="--tabular"
    threads: 2
    wrapper:
        "v4.3.0/bio/seqkit"


rule sliding_window_around_circle_references:
    input:
        fasta="results/circles/{circle}/{circle}.fa"
    output:
        fasta="results/circles/{circle}/{circle}.circular_sliding_windows.fa",
    log:
        "logs/circles/{circle}/{circle}.circular_sliding_windows.log"
    params:
        command="sliding",
        extra="--circular-genome -W 3996 -s 999",
    threads: 2
    wrapper:
        "v4.3.0/bio/seqkit"


def determine_fragment_number(wildcards, input):
    stats = pd.read_csv(input.tsv, delimiter="\t")
    total_length = int(stats.loc[0, "sum_len"])
    return int( np.ceil( total_length * int(wildcards.coverage) / int(wildcards.mean_nuc) ) )

rule simulate_illumina_reads:
    input:
        fasta="results/circles/{circle}/{circle}.circular_sliding_windows.fa",
        tsv="results/circles/{circle}/{circle}.stats.tsv",
    output:
        fq1="results/circles/{circle}/illumina/{circle}.{coverage}X.mean_fragment_nucleotides_{mean_nuc}.1.fq",
        fq2="results/circles/{circle}/illumina/{circle}.{coverage}X.mean_fragment_nucleotides_{mean_nuc}.2.fq",
    log:
        "logs/circles/{circle}/illumina/{circle}.{coverage}X.mean_fragment_nucleotides_{mean_nuc}.log",
    conda: "envs/mason.yaml"
    params:
        fragment_number=lambda wc, input: determine_fragment_number(wc, input),
        read_length=lambda wc: int( int(wc.mean_nuc) / 2),
    threads: 4
    shell:
        "mason_simulator "
        " --input-reference {input.fasta} "
        " --out {output.fq1} "
        " --out-right {output.fq2} "
        " --num-threads {threads} "
        " --fragment-mean-size 350 "
        " --illumina-read-length {params.read_length} "
        " --num-fragments {params.fragment_number} "
        " 2> {log}"


rule download_nanosim_genome_model:
    output:
        model=multiext(
            "resources/human_NA12878_DNA_FAB49712_guppy/training",
            "_aligned_reads.pkl",
            "_aligned_region.pkl",
            "_chimeric_info",
            "_error_markov_model",
            "_error_rate.tsv",
            "_first_match.hist",
            "_gap_length.pkl",
            "_ht_length.pkl",
            "_ht_ratio.pkl",
            "_match_markov_model",
            "_model_profile",
            "_reads_alignment_rate",
            "_strandness_rate",
            "_unaligned_length.pkl",
        ),
    conda: "envs/download.yaml"
    log: "logs/human_NA12878_DNA_FAB49712_guppy/training_download.log",
    shell:
        "cd resources/; "
        "wget https://github.com/bcgsc/NanoSim/raw/v3.1.0/pre-trained_models/human_NA12878_DNA_FAB49712_guppy.tar.gz; "
        "tar xzf human_NA12878_DNA_FAB49712_guppy.tar.gz; "


rule simulate_nanopore_reads:
    input:
        reference_genome="results/circles/{circle}/{circle}.fa",
        model=multiext(
            "resources{model}",
            "_aligned_reads.pkl",
            "_aligned_region.pkl",
            "_chimeric_info",
            "_error_markov_model",
            "_error_rate.tsv",
            "_first_match.hist",
            "_gap_length.pkl",
            "_ht_length.pkl",
            "_ht_ratio.pkl",
            "_match_markov_model",
            "_model_profile",
            "_reads_alignment_rate",
            "_strandness_rate",
            "_unaligned_length.pkl",
        ),
        tsv="results/circles/{circle}/{circle}.stats.tsv"
    output:
        reads="results/circles/{circle}/nanopore{model}/{circle}.{coverage}X.mean_fragment_nucleotides_{mean_nuc}.fq",  # fastq output requires specification of a --basecaller
        errors="results/circles/{circle}/nanopore{model}/{circle}.{coverage}X.mean_fragment_nucleotides_{mean_nuc}.simulated_errors.txt",
        unaligned_reads="results/circles/{circle}/nanopore{model}/{circle}.{coverage}X.mean_fragment_nucleotides_{mean_nuc}simulated_reads.unaligned.fq",  # asking for unaligned_reads implicitly turns off --perfect
    log:
        "logs/circles/{circle}/nanopore{model}/{circle}.{coverage}X.mean_fragment_nucleotides_{mean_nuc}.log",
    params:
        extra=lambda wc, input: f"--number {determine_fragment_number(wc, input)} --median_len {wc.mean_nuc} --sd_len {np.log(int(wc.mean_nuc) / 3)} --basecaller guppy -dna_type circular", # --median_len is really used as the mean length argument in numpy.random.lognormal, see here: https://github.com/bcgsc/NanoSim/blob/23911b67ce4733f0468ac26296e25348e3b73b4b/src/simulator.py#L1411
    resources:
        mem_mb=1600000,  # this very high memory requirement was for one particular circle: results/circles/c02/nanopore/human_NA12878_DNA_FAB49712_guppy/training/c02.10X.mean_fragment_nucleotides_30000.fq
        #lsf_queue="highmem",  # if you work on a cluster, make this the variable you need to send your job to a queue with the above mentioned amount of memory
    threads: 4
    wrapper:
        "feat/add-nanosim-wrapper/bio/nanosim/simulator"


def get_sample_input_circle_reads(wc):
    circles = lookup(dpath=f"groups/{wc.group}/{wc.alias}", within=config)
    files = []
    model = "" if wc.model == "" else f"{wc.model}"
    for c in circles:
        cov = lookup(dpath=f"groups/{wc.group}/{wc.alias}/{c}", within=config)
        if wc.model != "":
            cov = int(int(cov) / 4)
        files.append(
            f"results/circles/{c}/{wc.technology}{model}/{c}.{cov}X.mean_fragment_nucleotides_{wc.mean_nuc}{wc.read}.fq",

        )
    return files

rule create_full_sample:
    input:
        fqs=get_sample_input_circle_reads,
    output:
        fq="results/samples/{group}/{technology}{model}/{group}.{alias}.mean_fragment_nucleotides_{mean_nuc}{read}.fq",
    log:
        "logs/samples/{group}/{technology}{model}/{group}.{alias}.mean_fragment_nucleotides_{mean_nuc}{read}.log",
    conda: "envs/coreutils.yaml"
    localrule: True
    threads: 1
    shell:
        "cat {input.fqs} >{output.fq} 2>{log}"

rule create_samples_sheet:
    output:
        tsv="results/samples/samples.tsv"
    localrule: True
    run:
        with open(output.tsv, 'w') as out:
            out.write(
                "\t".join([
                    "sample_name",
                    "group",
                    "alias"
                    "platform",
                ])
            )
            for g in config["groups"]:
                for alias in config["groups"][g]:
                    for platform in ["NANOPORE", "ILLUMINA"]:
                        out.write(
                            "\t".join([
                                f"{g}_{alias}",
                                g,
                                alias,
                                platform
                            ])
                        )
                        out.write("\n")


rule create_units_sheet:
    output:
        tsv="results/samples/units.tsv"
    localrule: True
    run:
        with open(output.tsv, 'w') as out:
            out.write(
                "\t".join([
                    "sample_name",
                    "unit_name",
                    "fq1",
                    "fq2",
                ])
            )
            for g in config["groups"]:
                for alias in config["groups"][g]:
                    out.write(
                        "\t".join([
                            f"{g}_{alias}",
                            "u1",
                            f"../raw/{g}/illumina/{g}.{alias}.mean_fragment_nucleotides_{MEAN_NUC_ILLUMINA}.1.fq",
                            f"../raw/{g}/illumina/{g}.{alias}.mean_fragment_nucleotides_{MEAN_NUC_ILLUMINA}.2.fq",
                        ])
                    )
                    out.write("\n")
                    out.write(
                        "\t".join([
                            f"{g}_{alias}",
                            "u1",
                            f"../raw/{g}/nanopore{MODEL}/{g}.{alias}.mean_fragment_nucleotides_{MEAN_NUC_NANOPORE}.fq",
                            "",
                        ])
                    )
                    out.write("\n")

